from __future__ import print_function
import os, time, logging,datetime

def createTimestamp():
    timestamp = time.time()
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d_%H-%M-%S')

def LoggerFactory(loggerName, logDirPath):
    if not os.path.exists(logDirPath):
        os.makedirs(logDirPath)

    suffix = createTimestamp()
    logger = logging.getLogger(loggerName+suffix)
    formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')

    fileHandler = logging.FileHandler(logDirPath + loggerName + "_" + suffix + ".log")
    fileHandler.setFormatter(formatter)
    logger.addHandler(fileHandler)

    consoleHandler = logging.StreamHandler()
    consoleHandler.setFormatter(formatter)
    logger.addHandler(consoleHandler)
    return logger

def extractFileNameFromFilePath(filePath):
    return os.path.basename(filePath)


def isValidSubdomain(fullDomain, checkDomain):
    # True:
    # ms1 = "bla.microsoft.com"
    # ms2 = "bla2.bla3.microsoft.com"
    # ms3 = "microsoft.com"
    #
    # False:
    # a1 = "microsoft.com.fake.com"
    # a2 = "microsoft.com.com"
    # a3 = "bla.microsoft.com.fake.com"
    #
    foundPos = fullDomain.find(checkDomain)

    if(foundPos == -1):
        return False

    posAfterCheckDomain = foundPos + len(checkDomain)

    return posAfterCheckDomain == len(fullDomain)

def contains(str, checkList):
    for checkStr in checkList:
        if str == checkStr:
            return True
    return False


def createHttpResponseLogMsg(flow, packetCounter):
    httpResStr = "############### HTTP Response ###############\n"
    httpResStr += "timestamp: " + createTimestamp() + "\n"
    httpResStr += "packetCounter: " + str(packetCounter) + "\n"
    httpResStr += "Flow ID: " + str(flow.id) + "\n"
    httpResStr += "Status code: " + str(flow.response.status_code) + "\n"
    httpResStr += "...Request headers...\n"
    httpResStr += "PrettyHost: " + str(flow.request.pretty_host) + "\n"
    headers = dict(flow.request.headers)  # convert to dict
    for key, value in headers.items():
        httpResStr += key + ": " + value + "\n"

    httpResStr += "...Response headers...\n"
    headers = dict(flow.response.headers)  # convert to dict
    for key, value in headers.items():
        httpResStr += key + ": " + value + "\n"

    return httpResStr

def createHttpRequestLogMsg(flow, packetCounter):
    httpReqStr = "############### HTTP Request ###############\n"
    httpReqStr += "timestamp: " + createTimestamp() + "\n"
    httpReqStr += "packetCounter: " + str(packetCounter) + "\n"
    httpReqStr += "Flow ID: " + str(flow.id) + "\n"
    httpReqStr += "PrettyHost: " + str(flow.request.pretty_host) + "\n"
    httpReqStr += "Host (IP): " + flow.request.host + "\n"
    httpReqStr += "Port: " + str(flow.request.port) + "\n"
    httpReqStr += "Version: " + flow.request.http_version + "\n"
    httpReqStr += "Method: " + str(flow.request.method) + "\n"
    httpReqStr += "URL: " + str(flow.request.url) + "\n"
    httpReqStr += "...Request headers...\n"
    headers = dict(flow.request.headers)  # convert to dict
    for key, value in headers.items():
        httpReqStr += key + ": " + value + "\n"

    httpReqStr += "urlencoded_form: " + str(flow.request.urlencoded_form) + "\n"
    return httpReqStr

def saveToFile(content, filePath, flags):
    parentDirPath = os.path.dirname(filePath)

    if not os.path.exists(parentDirPath):
        os.makedirs(parentDirPath)

    contentfile = open(filePath, flags)
    contentfile.write(content)
    contentfile.close()


def filterMicrosoftHttpTraffic(flow):
    blacklistedUserAgents = ["WindowsShellClient/9.0.40929.0 (Windows)",
                             "Microsoft BITS/7.8",
                             "Microsoft-CryptoAPI/10.0",
                             "OneSettingsQuery",
                             "Windows-Update-Agent/10.0.10011.16384 Client-Protocol/1.81",
                             "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 10.0; Win64; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; IDCRL 18.10.0.17134.0.0; IDCRL-cfg 16.000.27716.00; App svchost.exe, 10.0.17134.1, {DF60E2DF-88AD-4526-AE21-83D130EF0F68}",
                             "WicaAgent",
                             "cpprestsdk/2.8.0",
                             "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134",
                             ]

    blacklistedDomains = ["symcb.com","firefox.com","microsoft.com", "windowsupdate.com", "live.com", "msn.com", "akamaized.net", "windows.com", "onenote.com", "onenote.net", "googlegroups.com", "sfx.ms", "google.com", "xing.com", "digicert.com", "adobe.com", "bing.com"]

    headers = dict(flow.request.headers)

    for blacklistedDomain in blacklistedDomains:
        if isValidSubdomain(flow.request.pretty_host, blacklistedDomain):# and utils.contains(headers["User-Agent"], blacklistedUserAgents):
            return True
    return False
